fn main() {
    println!("Hello, world!");
    let multiply = closure_1(10);
    let x10 = multiply(2);
    println!("{}", x10);
}

fn closure_1(a: i32) -> impl Fn(i32) -> i32 {
    // move относят не к самому объекту замыкания и
    // не к способу хранения переменных окружения в нем,
    // а к способу вызова функционального тела замыкания.
    //
    // То есть, move влияет на то, захватит ли само замыкание
    // (не его тело, а его структура!) переменные окружения во владение
    // или будет заимствовать по ссылке.

    move |x| a * x

    // // simplify version of closure_1 to understanding: "move |x| a*x"
    // struct Closure1 {
    //     a: i32,
    // }
    //
    // impl Fn<i32> for Closure1 {
    //     type Output = i32;
    //     fn call(&self, x: i32) -> Self::Output {
    //         self.a * x
    //     }
    // }
}

// Замыкание — это структура, в поля которой записываются переменные окружения, а тело становится телом метода Fn::call, FnMut::call_mut или FnOnce::call_once.
// Ключевое слово move управляет способом захвата переменных в сам объект замыкания, а не их использованием в теле замыкания при вызове.
// Чтобы разрешить конфликты владения в самом теле, иногда приходится использовать клонирование.
